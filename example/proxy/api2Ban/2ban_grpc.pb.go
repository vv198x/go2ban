// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: 2ban.proto

package api2Ban

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IP2BanClient is the client API for IP2Ban service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IP2BanClient interface {
	IP(ctx context.Context, in *IPStringRequest, opts ...grpc.CallOption) (*OKReply, error)
}

type iP2BanClient struct {
	cc grpc.ClientConnInterface
}

func NewIP2BanClient(cc grpc.ClientConnInterface) IP2BanClient {
	return &iP2BanClient{cc}
}

func (c *iP2BanClient) IP(ctx context.Context, in *IPStringRequest, opts ...grpc.CallOption) (*OKReply, error) {
	out := new(OKReply)
	err := c.cc.Invoke(ctx, "/IP2ban/IP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IP2BanServer is the server API for IP2Ban service.
// All implementations must embed UnimplementedIP2BanServer
// for forward compatibility
type IP2BanServer interface {
	IP(context.Context, *IPStringRequest) (*OKReply, error)
	mustEmbedUnimplementedIP2BanServer()
}

// UnimplementedIP2BanServer must be embedded to have forward compatible implementations.
type UnimplementedIP2BanServer struct {
}

func (UnimplementedIP2BanServer) IP(context.Context, *IPStringRequest) (*OKReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IP not implemented")
}
func (UnimplementedIP2BanServer) mustEmbedUnimplementedIP2BanServer() {}

// UnsafeIP2BanServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IP2BanServer will
// result in compilation errors.
type UnsafeIP2BanServer interface {
	mustEmbedUnimplementedIP2BanServer()
}

func RegisterIP2BanServer(s grpc.ServiceRegistrar, srv IP2BanServer) {
	s.RegisterService(&IP2Ban_ServiceDesc, srv)
}

func _IP2Ban_IP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPStringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IP2BanServer).IP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IP2ban/IP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IP2BanServer).IP(ctx, req.(*IPStringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IP2Ban_ServiceDesc is the grpc.ServiceDesc for IP2Ban service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IP2Ban_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "IP2ban",
	HandlerType: (*IP2BanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IP",
			Handler:    _IP2Ban_IP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "2ban.proto",
}
