// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
//
//	protoc-gen-go v1.28.1
//	protoc        v3.19.4
//
// source: 2ban.proto
package grpc

import (
	"github.com/stretchr/testify/assert"
	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
	"testing"
)

func TestIPStringRequest_Descriptor(t *testing.T) {
	type fields struct {
		state         protoimpl.MessageState
		sizeCache     protoimpl.SizeCache
		unknownFields protoimpl.UnknownFields
		Ip            string
	}
	tests := []struct {
		name   string
		fields fields
		want   []byte
		want1  []int
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			ip := &IPStringRequest{
				state:         tt.fields.state,
				sizeCache:     tt.fields.sizeCache,
				unknownFields: tt.fields.unknownFields,
				Ip:            tt.fields.Ip,
			}
			got, got1 := ip.Descriptor()
			assert.Equalf(t, tt.want, got, "Descriptor()")
			assert.Equalf(t, tt.want1, got1, "Descriptor()")
		})
	}
}

func TestIPStringRequest_GetIp(t *testing.T) {
	type fields struct {
		state         protoimpl.MessageState
		sizeCache     protoimpl.SizeCache
		unknownFields protoimpl.UnknownFields
		Ip            string
	}
	tests := []struct {
		name   string
		fields fields
		want   string
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			x := &IPStringRequest{
				state:         tt.fields.state,
				sizeCache:     tt.fields.sizeCache,
				unknownFields: tt.fields.unknownFields,
				Ip:            tt.fields.Ip,
			}
			assert.Equalf(t, tt.want, x.GetIp(), "GetIp()")
		})
	}
}

func TestIPStringRequest_ProtoMessage(t *testing.T) {
	type fields struct {
		state         protoimpl.MessageState
		sizeCache     protoimpl.SizeCache
		unknownFields protoimpl.UnknownFields
		Ip            string
	}
	tests := []struct {
		name   string
		fields fields
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			ip := &IPStringRequest{
				state:         tt.fields.state,
				sizeCache:     tt.fields.sizeCache,
				unknownFields: tt.fields.unknownFields,
				Ip:            tt.fields.Ip,
			}
			ip.ProtoMessage()
		})
	}
}

func TestIPStringRequest_ProtoReflect(t *testing.T) {
	type fields struct {
		state         protoimpl.MessageState
		sizeCache     protoimpl.SizeCache
		unknownFields protoimpl.UnknownFields
		Ip            string
	}
	tests := []struct {
		name   string
		fields fields
		want   protoreflect.Message
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			x := &IPStringRequest{
				state:         tt.fields.state,
				sizeCache:     tt.fields.sizeCache,
				unknownFields: tt.fields.unknownFields,
				Ip:            tt.fields.Ip,
			}
			assert.Equalf(t, tt.want, x.ProtoReflect(), "ProtoReflect()")
		})
	}
}

func TestIPStringRequest_Reset(t *testing.T) {
	type fields struct {
		state         protoimpl.MessageState
		sizeCache     protoimpl.SizeCache
		unknownFields protoimpl.UnknownFields
		Ip            string
	}
	tests := []struct {
		name   string
		fields fields
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			x := &IPStringRequest{
				state:         tt.fields.state,
				sizeCache:     tt.fields.sizeCache,
				unknownFields: tt.fields.unknownFields,
				Ip:            tt.fields.Ip,
			}
			x.Reset()
		})
	}
}

func TestIPStringRequest_String(t *testing.T) {
	type fields struct {
		state         protoimpl.MessageState
		sizeCache     protoimpl.SizeCache
		unknownFields protoimpl.UnknownFields
		Ip            string
	}
	tests := []struct {
		name   string
		fields fields
		want   string
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			x := &IPStringRequest{
				state:         tt.fields.state,
				sizeCache:     tt.fields.sizeCache,
				unknownFields: tt.fields.unknownFields,
				Ip:            tt.fields.Ip,
			}
			assert.Equalf(t, tt.want, x.String(), "String()")
		})
	}
}

func TestOKReply_Descriptor(t *testing.T) {
	type fields struct {
		state         protoimpl.MessageState
		sizeCache     protoimpl.SizeCache
		unknownFields protoimpl.UnknownFields
		Ok            bool
	}
	tests := []struct {
		name   string
		fields fields
		want   []byte
		want1  []int
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			ok := &OKReply{
				state:         tt.fields.state,
				sizeCache:     tt.fields.sizeCache,
				unknownFields: tt.fields.unknownFields,
				Ok:            tt.fields.Ok,
			}
			got, got1 := ok.Descriptor()
			assert.Equalf(t, tt.want, got, "Descriptor()")
			assert.Equalf(t, tt.want1, got1, "Descriptor()")
		})
	}
}

func TestOKReply_GetOk(t *testing.T) {
	type fields struct {
		state         protoimpl.MessageState
		sizeCache     protoimpl.SizeCache
		unknownFields protoimpl.UnknownFields
		Ok            bool
	}
	tests := []struct {
		name   string
		fields fields
		want   bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			x := &OKReply{
				state:         tt.fields.state,
				sizeCache:     tt.fields.sizeCache,
				unknownFields: tt.fields.unknownFields,
				Ok:            tt.fields.Ok,
			}
			assert.Equalf(t, tt.want, x.GetOk(), "GetOk()")
		})
	}
}

func TestOKReply_ProtoMessage(t *testing.T) {
	type fields struct {
		state         protoimpl.MessageState
		sizeCache     protoimpl.SizeCache
		unknownFields protoimpl.UnknownFields
		Ok            bool
	}
	tests := []struct {
		name   string
		fields fields
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			ok := &OKReply{
				state:         tt.fields.state,
				sizeCache:     tt.fields.sizeCache,
				unknownFields: tt.fields.unknownFields,
				Ok:            tt.fields.Ok,
			}
			ok.ProtoMessage()
		})
	}
}

func TestOKReply_ProtoReflect(t *testing.T) {
	type fields struct {
		state         protoimpl.MessageState
		sizeCache     protoimpl.SizeCache
		unknownFields protoimpl.UnknownFields
		Ok            bool
	}
	tests := []struct {
		name   string
		fields fields
		want   protoreflect.Message
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			x := &OKReply{
				state:         tt.fields.state,
				sizeCache:     tt.fields.sizeCache,
				unknownFields: tt.fields.unknownFields,
				Ok:            tt.fields.Ok,
			}
			assert.Equalf(t, tt.want, x.ProtoReflect(), "ProtoReflect()")
		})
	}
}

func TestOKReply_Reset(t *testing.T) {
	type fields struct {
		state         protoimpl.MessageState
		sizeCache     protoimpl.SizeCache
		unknownFields protoimpl.UnknownFields
		Ok            bool
	}
	tests := []struct {
		name   string
		fields fields
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			x := &OKReply{
				state:         tt.fields.state,
				sizeCache:     tt.fields.sizeCache,
				unknownFields: tt.fields.unknownFields,
				Ok:            tt.fields.Ok,
			}
			x.Reset()
		})
	}
}

func TestOKReply_String(t *testing.T) {
	type fields struct {
		state         protoimpl.MessageState
		sizeCache     protoimpl.SizeCache
		unknownFields protoimpl.UnknownFields
		Ok            bool
	}
	tests := []struct {
		name   string
		fields fields
		want   string
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			x := &OKReply{
				state:         tt.fields.state,
				sizeCache:     tt.fields.sizeCache,
				unknownFields: tt.fields.unknownFields,
				Ok:            tt.fields.Ok,
			}
			assert.Equalf(t, tt.want, x.String(), "String()")
		})
	}
}

func Test_file__2ban_proto_init(t *testing.T) {
	tests := []struct {
		name string
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			file__2ban_proto_init()
		})
	}
}

func Test_file__2ban_proto_rawDescGZIP(t *testing.T) {
	tests := []struct {
		name string
		want []byte
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			assert.Equalf(t, tt.want, file__2ban_proto_rawDescGZIP(), "file__2ban_proto_rawDescGZIP()")
		})
	}
}
