// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: 2ban.proto
package grpc

import (
	"context"
	"fmt"
	"github.com/stretchr/testify/assert"
	"google.golang.org/grpc"
	"testing"
)

func TestNewIP2BanClient(t *testing.T) {
	type args struct {
		cc grpc.ClientConnInterface
	}
	tests := []struct {
		name string
		args args
		want IP2BanClient
	}{}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			assert.Equalf(t, tt.want, NewIP2BanClient(tt.args.cc), "NewIP2BanClient(%v)", tt.args.cc)
		})
	}
}

func TestRegisterIP2BanServer(t *testing.T) {
	type args struct {
		s   grpc.ServiceRegistrar
		srv IP2BanServer
	}
	tests := []struct {
		name string
		args args
	}{}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			RegisterIP2BanServer(tt.args.s, tt.args.srv)
		})
	}
}

func TestUnimplementedIP2BanServer_IP(t *testing.T) {
	type args struct {
		in0 context.Context
		in1 *IPStringRequest
	}
	tests := []struct {
		name    string
		args    args
		want    *OKReply
		wantErr assert.ErrorAssertionFunc
	}{}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			un := UnimplementedIP2BanServer{}
			got, err := un.IP(tt.args.in0, tt.args.in1)
			if !tt.wantErr(t, err, fmt.Sprintf("IP(%v, %v)", tt.args.in0, tt.args.in1)) {
				return
			}
			assert.Equalf(t, tt.want, got, "IP(%v, %v)", tt.args.in0, tt.args.in1)
		})
	}
}

func TestUnimplementedIP2BanServer_mustEmbedUnimplementedIP2BanServer(t *testing.T) {
	tests := []struct {
		name string
	}{}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			un := UnimplementedIP2BanServer{}
			un.mustEmbedUnimplementedIP2BanServer()
		})
	}
}

func Test__IP2Ban_IP_Handler(t *testing.T) {
	type args struct {
		srv         interface{}
		ctx         context.Context
		dec         func(interface{}) error
		interceptor grpc.UnaryServerInterceptor
	}
	tests := []struct {
		name    string
		args    args
		want    interface{}
		wantErr assert.ErrorAssertionFunc
	}{}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, _ := _IP2Ban_IP_Handler(tt.args.srv, tt.args.ctx, tt.args.dec, tt.args.interceptor)

			assert.Equalf(t, tt.want, got, "_IP2Ban_IP_Handler(%v, %v, %v, %v)", tt.args.srv, tt.args.ctx, tt.args.dec, tt.args.interceptor)
		})
	}
}

func Test_iP2BanClient_IP(t *testing.T) {
	type fields struct {
		cc grpc.ClientConnInterface
	}
	type args struct {
		ctx  context.Context
		in   *IPStringRequest
		opts []grpc.CallOption
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    *OKReply
		wantErr assert.ErrorAssertionFunc
	}{}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			c := &iP2BanClient{
				cc: tt.fields.cc,
			}
			got, err := c.IP(tt.args.ctx, tt.args.in, tt.args.opts...)
			if !tt.wantErr(t, err, fmt.Sprintf("IP(%v, %v, %v)", tt.args.ctx, tt.args.in, tt.args.opts)) {
				return
			}
			assert.Equalf(t, tt.want, got, "IP(%v, %v, %v)", tt.args.ctx, tt.args.in, tt.args.opts)
		})
	}
}
