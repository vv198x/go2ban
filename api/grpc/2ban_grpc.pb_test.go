// nolint
// The file is auto-generated, to test the auto-generated grpc go file
// Google tests needed here
package grpc

import (
	"context"
	"github.com/stretchr/testify/assert"
	"google.golang.org/grpc"
	"testing"
)

func TestNewIP2BanClient(t *testing.T) {
	mock := iP2BanClient{}
	type args struct {
		cc grpc.ClientConnInterface
	}
	tests := []struct {
		name string
		args args
		want IP2BanClient
	}{
		{"Autogenerated test", args{}, &mock},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			assert.Equalf(t, tt.want, NewIP2BanClient(tt.args.cc), "NewIP2BanClient(%v)", tt.args.cc)
		})
	}
}

func TestUnimplementedIP2BanServer_IP(t *testing.T) {
	type args struct {
		in0 context.Context
		in1 *IPStringRequest
	}
	tests := []struct {
		name string
		args args
		want *OKReply
	}{
		{"Autogenerated test", args{}, &OKReply{}},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			un := UnimplementedIP2BanServer{}
			_, err := un.IP(tt.args.in0, tt.args.in1)
			if err == nil {
				// Some google code
			}
		})
	}
}

func TestUnimplementedIP2BanServer_mustEmbedUnimplementedIP2BanServer(t *testing.T) {
	tests := []struct {
		name string
	}{
		{"Autogenerated test"},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			un := UnimplementedIP2BanServer{}
			un.mustEmbedUnimplementedIP2BanServer()
		})
	}
}

func TestIP2BanClient(t *testing.T) {
	assert := assert.New(t)

	// Create an instance of context.Context
	ctx := context.Background()

	// Create an instance of IPStringRequest
	in := &IPStringRequest{
		Ip: "127.0.0.1",
	}

	// Create a mock implementation of the IP2BanClient interface
	mockClient := &mockIP2BanClient{}

	// Call the IP method of the mock client
	out, err := mockClient.IP(ctx, in)

	// Check for errors
	assert.Nil(err)
	assert.NotNil(out)

	// Compare the returned value with the expected value
	expectedMessage := &OKReply{
		Ok: true,
	}
	assert.Equal(expectedMessage, out)
}

type mockIP2BanClient struct{}

func (c *mockIP2BanClient) IP(ctx context.Context, in *IPStringRequest, opts ...grpc.CallOption) (*OKReply, error) {
	return &OKReply{
		Ok: true,
	}, nil
}
